// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// Prisma schema file

// This is your Prisma schema file

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  telegramId  String  @id
  username    String?
  goldBalance Int     @default(0)

  // Base ability stats
  level                  Int @default(1)
  expToNextLevel         Int @default(570) @map("exp_to_next_level")
  exp                    Int @default(0)
  str                    Int @default(1)
  def                    Int @default(1)
  dex                    Int @default(1)
  luk                    Int @default(1)
  magic                  Int @default(1)
  hpLevel                Int @default(1) @map("hp_level")
  expHp                  Int @default(0) @map("exp_hp")
  expToNextHpLevel       Int @default(570) @map("exp_to_next_hp_level")
  outstandingSkillPoints Int @default(0) @map("outstanding_skill_points")

  // Base combat stats
  maxHp             Float @default(100) @map("max_hp")
  atkSpd            Float @default(10) @map("atk_spd")
  acc               Float @default(100) @map("acc")
  eva               Float @default(100) @map("eva")
  maxMeleeDmg       Float @default(30) @map("max_melee_dmg")
  maxRangedDmg      Float @default(30) @map("max_ranged_dmg")
  maxMagicDmg       Float @default(30) @map("max_magic_dmg")
  critChance        Float @default(0.00398) @map("crit_chance")
  critMultiplier    Float @default(1.290) @map("crit_multiplier")
  dmgReduction      Float @default(15) @map("dmg_reduction")
  magicDmgReduction Float @default(10) @map("magic_dmg_reduction")
  hpRegenRate       Float @default(20) @map("hp_regen_rate")
  hpRegenAmount     Float @default(10.8) @map("hp_regen_amount")

  lastBattleEndTimestamp DateTime? @map("last_battle_end_timestamp")

  // Farming
  farmingLevel          Int @default(1)
  farmingExp            Int @default(0)
  expToNextFarmingLevel Int @default(570) @map("exp_to_next_farming_level")

  // Crafting
  craftingLevel          Int @default(1)
  craftingExp            Int @default(0)
  expToNextCraftingLevel Int @default(570) @map("exp_to_next_crafting_level")

  /**
   * // Crafting and farming boost
   * doubleResourceOddsBase               Float @default(0.01)
   * skillIntervalReductionMultiplierBase Float @default(1) // need to push db changes
   */

  doubleResourceOdds               Float @default(0.01)
  skillIntervalReductionMultiplier Float @default(1)

  // inventory slots
  maxInventorySlots      Int @default(40) // Set a reasonable default
  maxSlimeInventorySlots Int @default(40) // Set a reasonable default

  // Optional equipment relationships
  hatInventoryId      Int? @unique
  armourInventoryId   Int? @unique
  weaponInventoryId   Int? @unique
  shieldInventoryId   Int? @unique
  capeInventoryId     Int? @unique
  necklaceInventoryId Int? @unique

  // Relations to the Inventory table for equipped items
  hat      Inventory? @relation("Hat", fields: [hatInventoryId], references: [id])
  armour   Inventory? @relation("Armour", fields: [armourInventoryId], references: [id])
  weapon   Inventory? @relation("Weapon", fields: [weaponInventoryId], references: [id])
  shield   Inventory? @relation("Shield", fields: [shieldInventoryId], references: [id])
  cape     Inventory? @relation("Cape", fields: [capeInventoryId], references: [id])
  necklace Inventory? @relation("Necklace", fields: [necklaceInventoryId], references: [id])

  // Relation to inventory
  inventory Inventory[]

  // Relation to Combat stats
  combatId Int
  combat   Combat @relation(fields: [combatId], references: [id])

  // Relation to slimes
  slimes Slime[]

  // Relation to equipped slime
  equippedSlimeId Int?   @unique
  equippedSlime   Slime? @relation("EquippedSlime", fields: [equippedSlimeId], references: [id])

  DungeonLeaderboard DungeonLeaderboard[]

  BreedingActivityLog BreedingActivityLog[]

  FarmingActivityLog FarmingActivityLog[]

  CraftingActivityLog CraftingActivityLog[]

  CombatActivityLog CombatActivityLog[]

  AccomplishmentProgress AccomplishmentProgress[]

  UserDeviceFingerprint UserDeviceFingerprint[]

  referralLink      ReferralLink?        @relation("UserOwnedLink")
  referredBy        ReferralRelation?    @relation("ReferralReferee")
  referees          ReferralRelation[]   @relation("ReferralReferrer")
  referralEarnings  ReferralEarningLog[] @relation("RefEarningsReferrer")
  earningsGenerated ReferralEarningLog[] @relation("RefEarningsReferee")
}

model Combat {
  id Int @id @default(autoincrement())

  attackType AttackType @default(Melee)
  cp         Decimal    @default(699) @db.Decimal(65, 0)

  hp                Float @default(100)
  maxHp             Float @default(100) @map("max_hp")
  atkSpd            Float @default(10) @map("atk_spd")
  acc               Float @default(100) @map("acc")
  eva               Float @default(100) @map("eva")
  maxMeleeDmg       Float @default(30) @map("max_melee_dmg")
  maxRangedDmg      Float @default(30) @map("max_ranged_dmg")
  maxMagicDmg       Float @default(30) @map("max_magic_dmg")
  critChance        Float @default(0.006623) @map("crit_chance")
  critMultiplier    Float @default(1.290) @map("crit_multiplier")
  dmgReduction      Float @default(10) @map("dmg_reduction")
  magicDmgReduction Float @default(10) @map("magic_dmg_reduction")
  hpRegenRate       Float @default(20) @map("hp_regen_rate")
  hpRegenAmount     Float @default(5.7) @map("hp_regen_amount")

  meleeFactor Float @default(0) @map("melee_factor")
  rangeFactor Float @default(0) @map("range_factor")
  magicFactor Float @default(0) @map("magic_factor")

  reinforceAir   Float @default(0) @map("reinforce_air")
  reinforceWater Float @default(0) @map("reinforce_water")
  reinforceEarth Float @default(0) @map("reinforce_earth")
  reinforceFire  Float @default(0) @map("reinforce_fire")

  user User[]

  Monster Monster[]
}

enum AttackType {
  Melee
  Ranged
  Magic
}

// Define enums for Rarity and Type
enum Rarity {
  S
  A
  B
  C
  D
}

enum TraitType {
  Body
  Pattern
  PrimaryColour
  Accent
  Detail
  EyeColour
  EyeShape
  Mouth
}

model Slime {
  id         Int    @id @default(autoincrement())
  ownerId    String
  generation Int
  imageUri   String
  owner      User   @relation(fields: [ownerId], references: [telegramId])
  equippedBy User?  @relation("EquippedSlime")

  // Traits with dominant and hidden genes
  Body_D  Int
  Body_H1 Int
  Body_H2 Int
  Body_H3 Int

  Pattern_D  Int
  Pattern_H1 Int
  Pattern_H2 Int
  Pattern_H3 Int

  PrimaryColour_D  Int
  PrimaryColour_H1 Int
  PrimaryColour_H2 Int
  PrimaryColour_H3 Int

  Accent_D  Int
  Accent_H1 Int
  Accent_H2 Int
  Accent_H3 Int

  Detail_D  Int
  Detail_H1 Int
  Detail_H2 Int
  Detail_H3 Int

  EyeColour_D  Int
  EyeColour_H1 Int
  EyeColour_H2 Int
  EyeColour_H3 Int

  EyeShape_D  Int
  EyeShape_H1 Int
  EyeShape_H2 Int
  EyeShape_H3 Int

  Mouth_D  Int
  Mouth_H1 Int
  Mouth_H2 Int
  Mouth_H3 Int

  // Relations to SlimeTrait
  BodyDominant SlimeTrait @relation("BodyDominant", fields: [Body_D], references: [id])
  BodyHidden1  SlimeTrait @relation("BodyHidden1", fields: [Body_H1], references: [id])
  BodyHidden2  SlimeTrait @relation("BodyHidden2", fields: [Body_H2], references: [id])
  BodyHidden3  SlimeTrait @relation("BodyHidden3", fields: [Body_H3], references: [id])

  PatternDominant SlimeTrait @relation("PatternDominant", fields: [Pattern_D], references: [id])
  PatternHidden1  SlimeTrait @relation("PatternHidden1", fields: [Pattern_H1], references: [id])
  PatternHidden2  SlimeTrait @relation("PatternHidden2", fields: [Pattern_H2], references: [id])
  PatternHidden3  SlimeTrait @relation("PatternHidden3", fields: [Pattern_H3], references: [id])

  PrimaryColourDominant SlimeTrait @relation("PrimaryColourDominant", fields: [PrimaryColour_D], references: [id])
  PrimaryColourHidden1  SlimeTrait @relation("PrimaryColourHidden1", fields: [PrimaryColour_H1], references: [id])
  PrimaryColourHidden2  SlimeTrait @relation("PrimaryColourHidden2", fields: [PrimaryColour_H2], references: [id])
  PrimaryColourHidden3  SlimeTrait @relation("PrimaryColourHidden3", fields: [PrimaryColour_H3], references: [id])

  AccentDominant SlimeTrait @relation("AccentDominant", fields: [Accent_D], references: [id])
  AccentHidden1  SlimeTrait @relation("AccentHidden1", fields: [Accent_H1], references: [id])
  AccentHidden2  SlimeTrait @relation("AccentHidden2", fields: [Accent_H2], references: [id])
  AccentHidden3  SlimeTrait @relation("AccentHidden3", fields: [Accent_H3], references: [id])

  DetailDominant SlimeTrait @relation("DetailDominant", fields: [Detail_D], references: [id])
  DetailHidden1  SlimeTrait @relation("DetailHidden1", fields: [Detail_H1], references: [id])
  DetailHidden2  SlimeTrait @relation("DetailHidden2", fields: [Detail_H2], references: [id])
  DetailHidden3  SlimeTrait @relation("DetailHidden3", fields: [Detail_H3], references: [id])

  EyeColourDominant SlimeTrait @relation("EyeColourDominant", fields: [EyeColour_D], references: [id])
  EyeColourHidden1  SlimeTrait @relation("EyeColourHidden1", fields: [EyeColour_H1], references: [id])
  EyeColourHidden2  SlimeTrait @relation("EyeColourHidden2", fields: [EyeColour_H2], references: [id])
  EyeColourHidden3  SlimeTrait @relation("EyeColourHidden3", fields: [EyeColour_H3], references: [id])

  EyeShapeDominant SlimeTrait @relation("EyeShapeDominant", fields: [EyeShape_D], references: [id])
  EyeShapeHidden1  SlimeTrait @relation("EyeShapeHidden1", fields: [EyeShape_H1], references: [id])
  EyeShapeHidden2  SlimeTrait @relation("EyeShapeHidden2", fields: [EyeShape_H2], references: [id])
  EyeShapeHidden3  SlimeTrait @relation("EyeShapeHidden3", fields: [EyeShape_H3], references: [id])

  MouthDominant SlimeTrait @relation("MouthDominant", fields: [Mouth_D], references: [id])
  MouthHidden1  SlimeTrait @relation("MouthHidden1", fields: [Mouth_H1], references: [id])
  MouthHidden2  SlimeTrait @relation("MouthHidden2", fields: [Mouth_H2], references: [id])
  MouthHidden3  SlimeTrait @relation("MouthHidden3", fields: [Mouth_H3], references: [id])
}

model SlimeTrait {
  id          Int       @id
  type        TraitType
  name        String
  rarity      Rarity
  pair0Id     Int? // Points to another SlimeTrait as the first potential pair
  mutation0Id Int? // Points to another SlimeTrait representing the first mutation to the next gen
  pair1Id     Int? // Points to another SlimeTrait as the second potential pair
  mutation1Id Int? // Points to another SlimeTrait representing the second mutation to the next gen

  statEffectId Int?
  statEffect   StatEffect? @relation(fields: [statEffectId], references: [id])

  // Relations for first pair and mutation
  pair0     SlimeTrait? @relation("Pair0", fields: [pair0Id], references: [id])
  mutation0 SlimeTrait? @relation("Mutation0", fields: [mutation0Id], references: [id])

  // Reverse relations for first pair and mutation
  paired0Traits   SlimeTrait[] @relation("Pair0")
  mutation0Traits SlimeTrait[] @relation("Mutation0")

  // Relations for second pair and mutation
  pair1     SlimeTrait? @relation("Pair1", fields: [pair1Id], references: [id])
  mutation1 SlimeTrait? @relation("Mutation1", fields: [mutation1Id], references: [id])

  // Reverse relations for second pair and mutation
  paired1Traits   SlimeTrait[] @relation("Pair1")
  mutation1Traits SlimeTrait[] @relation("Mutation1")

  // Relations to Slime (reverse)
  slimesAsBodyDominant Slime[] @relation("BodyDominant")
  slimesAsBodyHidden1  Slime[] @relation("BodyHidden1")
  slimesAsBodyHidden2  Slime[] @relation("BodyHidden2")
  slimesAsBodyHidden3  Slime[] @relation("BodyHidden3")

  slimesAsPatternDominant Slime[] @relation("PatternDominant")
  slimesAsPatternHidden1  Slime[] @relation("PatternHidden1")
  slimesAsPatternHidden2  Slime[] @relation("PatternHidden2")
  slimesAsPatternHidden3  Slime[] @relation("PatternHidden3")

  slimesAsPrimaryColourDominant Slime[] @relation("PrimaryColourDominant")
  slimesAsPrimaryColourHidden1  Slime[] @relation("PrimaryColourHidden1")
  slimesAsPrimaryColourHidden2  Slime[] @relation("PrimaryColourHidden2")
  slimesAsPrimaryColourHidden3  Slime[] @relation("PrimaryColourHidden3")

  slimesAsAccentDominant Slime[] @relation("AccentDominant")
  slimesAsAccentHidden1  Slime[] @relation("AccentHidden1")
  slimesAsAccentHidden2  Slime[] @relation("AccentHidden2")
  slimesAsAccentHidden3  Slime[] @relation("AccentHidden3")

  slimesAsDetailDominant Slime[] @relation("DetailDominant")
  slimesAsDetailHidden1  Slime[] @relation("DetailHidden1")
  slimesAsDetailHidden2  Slime[] @relation("DetailHidden2")
  slimesAsDetailHidden3  Slime[] @relation("DetailHidden3")

  slimesAsEyeColourDominant Slime[] @relation("EyeColourDominant")
  slimesAsEyeColourHidden1  Slime[] @relation("EyeColourHidden1")
  slimesAsEyeColourHidden2  Slime[] @relation("EyeColourHidden2")
  slimesAsEyeColourHidden3  Slime[] @relation("EyeColourHidden3")

  slimesAsEyeShapeDominant Slime[] @relation("EyeShapeDominant")
  slimesAsEyeShapeHidden1  Slime[] @relation("EyeShapeHidden1")
  slimesAsEyeShapeHidden2  Slime[] @relation("EyeShapeHidden2")
  slimesAsEyeShapeHidden3  Slime[] @relation("EyeShapeHidden3")

  slimesAsMouthDominant Slime[] @relation("MouthDominant")
  slimesAsMouthHidden1  Slime[] @relation("MouthHidden1")
  slimesAsMouthHidden2  Slime[] @relation("MouthHidden2")
  slimesAsMouthHidden3  Slime[] @relation("MouthHidden3")
}

enum EquipmentType {
  hat
  armour
  weapon
  shield
  cape
  necklace
}

// Equipment table
model Equipment {
  id          Int    @id
  name        String @unique
  description String @db.Text
  imgsrc      String

  buyPriceGP  Int?
  sellPriceGP Int

  buyPriceDittoWei Decimal? @db.Decimal(65, 0)

  requiredLvlCraft  Int @default(1)
  requiredLvlCombat Int @default(1)

  attackType AttackType? // only for weapon

  statEffectId Int?
  statEffect   StatEffect? @relation(fields: [statEffectId], references: [id])

  rarity Rarity
  type   EquipmentType

  equipmentInventory Inventory[]

  CraftingRecipe CraftingRecipe[]

  MonsterDrop MonsterDrop[]
}

// Items table
model Item {
  id           Int         @id
  name         String      @unique
  description  String      @db.Text
  imgsrc       String
  rarity       Rarity
  statEffectId Int?
  statEffect   StatEffect? @relation(fields: [statEffectId], references: [id])

  buyPriceGP  Int?
  sellPriceGP Int

  buyPriceDittoWei Decimal? @db.Decimal(65, 0)

  farmingDurationS     Int?
  farmingLevelRequired Int?
  farmingExp           Int?

  itemInventory Inventory[]

  CraftingRecipeItems CraftingRecipeItems[]

  MonsterDrop MonsterDrop[]
}

// Inventory table
model Inventory {
  id          Int      @id @default(autoincrement())
  userId      String
  itemId      Int? // References Item table (nullable for equipment entries)
  equipmentId Int? // References Equipment table (nullable for item entries)
  quantity    Int      @default(1)
  order       Int      @default(0) // Order for sorting in the inventory
  createdAt   DateTime @default(now())

  // Relations to User
  user      User       @relation(fields: [userId], references: [telegramId])
  item      Item?      @relation(fields: [itemId], references: [id])
  equipment Equipment? @relation(fields: [equipmentId], references: [id])

  // Relations for equipped items (mirrored from User)
  hatUser      User? @relation("Hat")
  armourUser   User? @relation("Armour")
  weaponUser   User? @relation("Weapon")
  shieldUser   User? @relation("Shield")
  capeUser     User? @relation("Cape")
  necklaceUser User? @relation("Necklace")

  // Enforce uniqueness: Only one row per user-item or user-equipment combo
  @@unique([userId, itemId, equipmentId])
  @@index([userId, order])
}

// Define an enum for effect types
enum EffectType {
  add // Represented as "+"
  mul // Represented as "*"
}

model StatEffect {
  id Int @id @default(autoincrement())

  maxHpMod                Float?      @map("max_hp_mod")
  maxHpEffect             EffectType?
  atkSpdMod               Float?      @map("atk_spd_mod")
  atkSpdEffect            EffectType?
  accMod                  Float?      @map("acc_mod")
  accEffect               EffectType?
  evaMod                  Float?      @map("eva_mod")
  evaEffect               EffectType?
  maxMeleeDmgMod          Float?      @map("max_melee_dmg_mod")
  maxMeleeDmgEffect       EffectType?
  maxRangedDmgMod         Float?      @map("max_ranged_dmg_mod")
  maxRangedDmgEffect      EffectType?
  maxMagicDmgMod          Float?      @map("max_magic_dmg_mod")
  maxMagicDmgEffect       EffectType?
  critChanceMod           Float?      @map("crit_chance_mod")
  critChanceEffect        EffectType?
  critMultiplierMod       Float?      @map("crit_multiplier_mod")
  critMultiplierEffect    EffectType?
  dmgReductionMod         Float?      @map("dmg_reduction_mod")
  dmgReductionEffect      EffectType?
  magicDmgReductionMod    Float?      @map("magic_dmg_reduction_mod")
  magicDmgReductionEffect EffectType?
  hpRegenRateMod          Float?      @map("hp_regen_rate_mod")
  hpRegenRateEffect       EffectType?
  hpRegenAmountMod        Float?      @map("hp_regen_amount_mod")
  hpRegenAmountEffect     EffectType?

  meleeFactor Float? @default(0) @map("melee_factor")
  rangeFactor Float? @default(0) @map("range_factor")
  magicFactor Float? @default(0) @map("magic_factor")

  reinforceAir   Float? @default(0) @map("reinforce_air")
  reinforceWater Float? @default(0) @map("reinforce_water")
  reinforceEarth Float? @default(0) @map("reinforce_earth")
  reinforceFire  Float? @default(0) @map("reinforce_fire")

  doubleResourceOddsMod               Float? @map("double_resource_odds_mod") // always add
  skillIntervalReductionMultiplierMod Float? @map("skill_interval_reduction_multiplier_mod") // always add

  durationS Int? // Duration in seconds for temporary buffs

  Item Item[]

  Equipment Equipment[]

  SlimeTrait SlimeTrait[]

  Monster Monster[] @relation("MonsterStatEffects")
}

model CraftingRecipe {
  id          Int       @id @default(autoincrement())
  equipmentId Int       @unique
  equipment   Equipment @relation(fields: [equipmentId], references: [id])
  durationS   Int

  craftingLevelRequired Int
  craftingExp           Int

  // This table defines the items required for crafting
  CraftingRecipeItems CraftingRecipeItems[]
}

model CraftingRecipeItems {
  id       Int            @id @default(autoincrement())
  recipeId Int
  recipe   CraftingRecipe @relation(fields: [recipeId], references: [id])
  itemId   Int
  item     Item           @relation(fields: [itemId], references: [id])
  quantity Int            @default(1) // Number of items required to craft the equipment

  @@unique([recipeId, itemId]) // Ensure unique combination of item and recipe
}

model Monster {
  id          Int    @id
  name        String @unique
  description String @db.Text
  imgsrc      String
  level       Int    @default(1)

  // Base ability stats (Before applying StatEffects)
  str     Int @default(1)
  def     Int @default(1)
  dex     Int @default(1)
  luk     Int @default(1)
  magic   Int @default(1)
  hpLevel Int @default(1) @map("hp_level")

  maxHp             Float @default(100) @map("max_hp") // HP Level * 100
  atkSpd            Float @default(10) @map("atk_spd") // 10 * DEX
  acc               Float @default(100) @map("acc") // 100 * DEX ^ 1.1
  eva               Float @default(100) @map("eva") // 100 * DEX ^ 1.05
  maxMeleeDmg       Float @default(20) @map("max_melee_dmg") // 5 + 15 * STR ^ 0.7
  maxRangedDmg      Float @default(20) @map("max_ranged_dmg") // 5 + 15 * DEX ^ 0.7
  maxMagicDmg       Float @default(20) @map("max_magic_dmg") // 5 + 15 * MAGIC ^ 0.7
  critChance        Float @default(0.006623) @map("crit_chance") // LUK / (LUK + 150)
  critMultiplier    Float @default(1.290) @map("crit_multiplier") // 1.2 + 0.3 * log(LUK + 1)
  dmgReduction      Float @default(10) @map("dmg_reduction") // 10 * DEF
  magicDmgReduction Float @default(10) @map("magic_dmg_reduction") // (10 * DEF) + (5 * MAGIC)
  hpRegenRate       Float @default(20) @map("hp_regen_rate") // s per tick
  hpRegenAmount     Float @default(10.8) @map("hp_regen_amount")

  // Exp and Gold Drops
  exp         Int
  minGoldDrop Int @default(0)
  maxGoldDrop Int @default(0)

  minDittoDrop Decimal @db.Decimal(65, 0) // wei
  maxDittoDrop Decimal @db.Decimal(65, 0) // wei

  // Drops relation (Many-to-Many through MonsterDrop)
  drops MonsterDrop[]

  // Combat stats (Derived from Base + Equipped StatEffects)
  combatId Int
  combat   Combat @relation(fields: [combatId], references: [id])

  // Array of StatEffects (Similar to User Gear, Items, Slime Traits)
  statEffects StatEffect[] @relation("MonsterStatEffects")

  DomainMonster DomainMonster[]

  DungeonMonsterSequence DungeonMonsterSequence[]
}

model MonsterDrop {
  id          Int   @id @default(autoincrement())
  monsterId   Int
  itemId      Int?
  equipmentId Int?
  dropRate    Float // Probability (0.0 - 1.0)
  quantity    Int   @default(1) // Amount of items dropped

  // Relations
  monster   Monster    @relation(fields: [monsterId], references: [id])
  item      Item?      @relation(fields: [itemId], references: [id])
  equipment Equipment? @relation(fields: [equipmentId], references: [id])

  @@unique([monsterId, itemId, equipmentId]) // Ensure no duplicate drops per monster
}

model Domain {
  id          Int     @id
  name        String  @unique
  description String  @db.Text
  imgsrc      String?

  monsters DomainMonster[]

  minCombatLevel Int?
  maxCombatLevel Int?

  entryPriceGP       Int?
  entryPriceDittoWei Decimal? @db.Decimal(65, 0)
  isActive           Boolean  @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DomainMonster {
  id        Int   @id @default(autoincrement())
  domainId  Int
  monsterId Int
  spawnRate Float

  domain  Domain  @relation(fields: [domainId], references: [id])
  monster Monster @relation(fields: [monsterId], references: [id])

  @@unique([domainId, monsterId]) // prevent duplicates
}

model Dungeon {
  id                  Int      @id
  name                String   @unique
  description         String   @db.Text
  imgsrc              String
  monsterGrowthFactor Float    @default(1.05) // e.g., 1.05 = 5% growth per wave
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  minCombatLevel Int?
  maxCombatLevel Int?

  entryPriceGP       Int?
  entryPriceDittoWei Decimal? @db.Decimal(65, 0)
  isActive           Boolean  @default(true)

  // A predefined monster sequence
  monsterSequence DungeonMonsterSequence[]

  DungeonLeaderboard DungeonLeaderboard[]
}

model DungeonMonsterSequence {
  id        Int      @id @default(autoincrement())
  dungeonId Int
  monsterId Int
  order     Int // The sequence in which the monster appears
  createdAt DateTime @default(now())

  // Relations
  dungeon Dungeon @relation(fields: [dungeonId], references: [id])
  monster Monster @relation(fields: [monsterId], references: [id])

  @@unique([dungeonId, order]) // Ensure one monster per slot in sequence
}

model DungeonLeaderboard {
  id        Int    @id @default(autoincrement())
  userId    String
  dungeonId Int

  monstersKilled Int      @default(0)
  damageDealt    Float    @default(0)
  damageTaken    Float    @default(0)
  timeElapsedMs  Int      @default(0)
  runDate        DateTime @default(now())

  score Float @default(0)

  // Relations
  user    User    @relation(fields: [userId], references: [telegramId])
  dungeon Dungeon @relation(fields: [dungeonId], references: [id])

  @@unique([userId, dungeonId], name: "userId_dungeonId")
  @@index([dungeonId, score])
  @@index([userId, dungeonId])
}

// Activity Logs
model FarmingActivityLog {
  id        Int      @id @default(autoincrement())
  userId    String
  timestamp DateTime @default(now())
  itemId    Int
  quantity  Int

  user User @relation(fields: [userId], references: [telegramId])

  @@index([userId, timestamp])
}

model CraftingActivityLog {
  id            Int      @id @default(autoincrement())
  userId        String
  timestamp     DateTime @default(now())
  equipmentIdIn Int // Final crafted equipment id
  quantityIn    Int // Usually 1, but flexible if you allow batch crafting

  consumedItems CraftingConsumedItem[]

  user User @relation(fields: [userId], references: [telegramId])

  @@index([userId, timestamp])
}

model CraftingConsumedItem {
  id                 Int @id @default(autoincrement())
  craftingActivityId Int
  itemId             Int
  quantity           Int

  craftingActivity CraftingActivityLog @relation(fields: [craftingActivityId], references: [id])

  @@index([craftingActivityId])
}

model BreedingActivityLog {
  id              Int      @id @default(autoincrement())
  userId          String
  timestamp       DateTime @default(now())
  dameId          Int
  dameGeneration  Int
  dameRarity      Rarity
  sireId          Int
  sireGeneration  Int
  sireRarity      Rarity
  childId         Int
  childGeneration Int
  childRarity     Rarity

  user User @relation(fields: [userId], references: [telegramId])

  @@index([userId, timestamp])
}

model CombatActivityLog {
  id          Int      @id @default(autoincrement())
  userId      String
  timestamp   DateTime @default(now())
  monsterId   Int
  expGained   Int
  dittoEarned Decimal? @db.Decimal(65, 0) // wei
  goldEarned  Int?

  user  User         @relation(fields: [userId], references: [telegramId])
  drops CombatDrop[]

  @@index([userId, timestamp])
}

model CombatDrop {
  id                  Int  @id @default(autoincrement())
  combatActivityLogId Int
  itemId              Int?
  equipmentId         Int?
  quantity            Int

  combatActivityLog CombatActivityLog @relation(fields: [combatActivityLogId], references: [id])

  @@index([combatActivityLogId])
}

model Accomplishment {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  createdAt   DateTime @default(now())
  maxUsers    Int?

  // JSON field to store flexible requirements
  requirements Json

  usersCompleted AccomplishmentProgress[]

  @@index([name])
}

model AccomplishmentProgress {
  id               Int      @id @default(autoincrement())
  accomplishmentId Int
  userId           String
  timestamp        DateTime @default(now())

  accomplishment Accomplishment @relation(fields: [accomplishmentId], references: [id])
  user           User           @relation(fields: [userId], references: [telegramId])

  @@unique([accomplishmentId, userId])
}

model UserDeviceFingerprint {
  id          Int      @id @default(autoincrement())
  userId      String
  fingerprint String
  ipAddress   String
  createdAt   DateTime @default(now())

  user User @relation(fields: [userId], references: [telegramId])

  @@index([fingerprint])
  @@index([ipAddress])
  @@index([userId])
}

// Referral system
model ReferralLink {
  id        String   @id @default(cuid())
  code      String   @unique
  ownerId   String?  @unique // Nullable, allows tracking org or platform codes
  owner     User?    @relation("UserOwnedLink", fields: [ownerId], references: [telegramId])
  createdAt DateTime @default(now())
}

model ReferralRelation {
  id               String  @id @default(cuid())
  refereeId        String  @unique
  referrerUserId   String? // for user-owned referrals
  referrerExternal String? // for marketing or platform sources (e.g., referral code)

  referee      User  @relation("ReferralReferee", fields: [refereeId], references: [telegramId])
  referrerUser User? @relation("ReferralReferrer", fields: [referrerUserId], references: [telegramId])

  createdAt DateTime @default(now())
}

model ReferralEventLog {
  id            String            @id @default(cuid())
  userId        String // The user who used the referral code
  oldReferrerId String? // null if no previous referrer
  newReferrerId String // new referrer set
  eventType     ReferralEventType // INITIAL or CHANGE
  createdAt     DateTime          @default(now())
}

enum ReferralEventType {
  INITIAL
  CHANGE
}

model ReferralEarningLog {
  id             String   @id @default(cuid())
  referrerId     String
  refereeId      String
  tier           Int // 1 for direct, 2 for indirect
  amountDittoWei Decimal  @db.Decimal(65, 0)
  createdAt      DateTime @default(now())

  referrer User @relation("RefEarningsReferrer", fields: [referrerId], references: [telegramId])
  referee  User @relation("RefEarningsReferee", fields: [refereeId], references: [telegramId])
}

model BetaTester {
  telegramId String  @id
  claimed    Boolean @default(false)
}

model UserMission {
  id         Int    @id @default(autoincrement())
  telegramId String // No foreign key constraint

  label String

  type MissionType

  // Optional foreign targets
  itemId      Int? // for farm
  equipmentId Int? // for craft
  monsterId   Int? // for combat
  slimeRarity Rarity? // for breeding

  quantity    Int
  progress    Int      @default(0)
  rewardDitto Decimal? @db.Decimal(65, 0)
  imgsrc      String? // frontend display (optional)

  round     Int      @default(0) // mission refresh round
  claimed   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum MissionType {
  FARM
  CRAFT
  COMBAT
  GACHA
  BREED
}
