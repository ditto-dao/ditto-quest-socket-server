// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// Prisma schema file

// This is your Prisma schema file

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  telegramId             String  @id
  username               String?
  goldBalance            Int     @default(0)
  level                  Int     @default(1)
  expToNextLevel         Int     @default(83) @map("exp_to_next_level")
  exp                    Int     @default(0)
  str                    Int     @default(1)
  def                    Int     @default(1)
  dex                    Int     @default(1)
  magic                  Int     @default(1)
  hpLevel                Int     @default(1) @map("hp_level")
  expHp                  Int     @default(0) @map("exp_hp")
  expToNextHpLevel       Int     @default(83) @map("exp_to_next_hp_level")
  outstandingSkillPoints Int     @default(0) @map("outstanding_skill_points")

  // Farming
  farmingLevel          Int @default(1)
  farmingExp            Int @default(0)
  expToNextFarmingLevel Int @default(83) @map("exp_to_next_farming_level")

  // Crafting
  craftingLevel          Int @default(1)
  craftingExp            Int @default(0)
  expToNextCraftingLevel Int @default(83) @map("exp_to_next_crafting_level")

  // Optional equipment relationships
  hatInventoryId       Int? @unique
  armourInventoryId    Int? @unique
  weaponInventoryId    Int? @unique
  shieldInventoryId    Int? @unique
  capeInventoryId      Int? @unique
  necklaceInventoryId  Int? @unique
  petInventoryId       Int? @unique
  spellbookInventoryId Int? @unique

  // Relations to the Inventory table for equipped items
  hat       Inventory? @relation("Hat", fields: [hatInventoryId], references: [id])
  armour    Inventory? @relation("Armour", fields: [armourInventoryId], references: [id])
  weapon    Inventory? @relation("Weapon", fields: [weaponInventoryId], references: [id])
  shield    Inventory? @relation("Shield", fields: [shieldInventoryId], references: [id])
  cape      Inventory? @relation("Cape", fields: [capeInventoryId], references: [id])
  necklace  Inventory? @relation("Necklace", fields: [necklaceInventoryId], references: [id])
  pet       Inventory? @relation("Pet", fields: [petInventoryId], references: [id])
  spellbook Inventory? @relation("Spellbook", fields: [spellbookInventoryId], references: [id])

  // Relation to inventory
  inventory Inventory[]

  // Relation to Combat stats
  combat Combat?

  // Relation to slimes
  slimes Slime[]

  // Relation to equipped slime
  equippedSlimeId Int?   @unique
  equippedSlime   Slime? @relation("EquippedSlime", fields: [equippedSlimeId], references: [id])
}

model Combat {
  userId  String @id
  str     Int    @default(1)
  def     Int    @default(1)
  dex     Int    @default(1)
  magic   Int    @default(1)
  hp      Int    @default(10)
  hpLevel Int    @default(1)

  // Relation back to the User
  user User @relation(fields: [userId], references: [telegramId])
}

// Define enums for Rarity and Type
enum Rarity {
  S
  A
  B
  C
  D
}

enum TraitType {
  Aura
  Body
  Core
  Headpiece
  Tail
  Arms
  Eyes
  Mouth
}

model Slime {
  id         Int    @id @default(autoincrement())
  ownerId    String
  generation Int
  owner      User   @relation(fields: [ownerId], references: [telegramId])
  equippedBy User?  @relation("EquippedSlime")

  // Traits with dominant and hidden genes
  Aura_D  Int
  Aura_H1 Int
  Aura_H2 Int
  Aura_H3 Int

  Body_D  Int
  Body_H1 Int
  Body_H2 Int
  Body_H3 Int

  Core_D  Int
  Core_H1 Int
  Core_H2 Int
  Core_H3 Int

  Headpiece_D  Int
  Headpiece_H1 Int
  Headpiece_H2 Int
  Headpiece_H3 Int

  Tail_D  Int
  Tail_H1 Int
  Tail_H2 Int
  Tail_H3 Int

  Arms_D  Int
  Arms_H1 Int
  Arms_H2 Int
  Arms_H3 Int

  Eyes_D  Int
  Eyes_H1 Int
  Eyes_H2 Int
  Eyes_H3 Int

  Mouth_D  Int
  Mouth_H1 Int
  Mouth_H2 Int
  Mouth_H3 Int

  // Relations to SlimeTrait
  AuraDominant SlimeTrait @relation("AuraDominant", fields: [Aura_D], references: [id])
  AuraHidden1  SlimeTrait @relation("AuraHidden1", fields: [Aura_H1], references: [id])
  AuraHidden2  SlimeTrait @relation("AuraHidden2", fields: [Aura_H2], references: [id])
  AuraHidden3  SlimeTrait @relation("AuraHidden3", fields: [Aura_H3], references: [id])

  BodyDominant SlimeTrait @relation("BodyDominant", fields: [Body_D], references: [id])
  BodyHidden1  SlimeTrait @relation("BodyHidden1", fields: [Body_H1], references: [id])
  BodyHidden2  SlimeTrait @relation("BodyHidden2", fields: [Body_H2], references: [id])
  BodyHidden3  SlimeTrait @relation("BodyHidden3", fields: [Body_H3], references: [id])

  CoreDominant SlimeTrait @relation("CoreDominant", fields: [Core_D], references: [id])
  CoreHidden1  SlimeTrait @relation("CoreHidden1", fields: [Core_H1], references: [id])
  CoreHidden2  SlimeTrait @relation("CoreHidden2", fields: [Core_H2], references: [id])
  CoreHidden3  SlimeTrait @relation("CoreHidden3", fields: [Core_H3], references: [id])

  HeadpieceDominant SlimeTrait @relation("HeadpieceDominant", fields: [Headpiece_D], references: [id])
  HeadpieceHidden1  SlimeTrait @relation("HeadpieceHidden1", fields: [Headpiece_H1], references: [id])
  HeadpieceHidden2  SlimeTrait @relation("HeadpieceHidden2", fields: [Headpiece_H2], references: [id])
  HeadpieceHidden3  SlimeTrait @relation("HeadpieceHidden3", fields: [Headpiece_H3], references: [id])

  TailDominant SlimeTrait @relation("TailDominant", fields: [Tail_D], references: [id])
  TailHidden1  SlimeTrait @relation("TailHidden1", fields: [Tail_H1], references: [id])
  TailHidden2  SlimeTrait @relation("TailHidden2", fields: [Tail_H2], references: [id])
  TailHidden3  SlimeTrait @relation("TailHidden3", fields: [Tail_H3], references: [id])

  ArmsDominant SlimeTrait @relation("ArmsDominant", fields: [Arms_D], references: [id])
  ArmsHidden1  SlimeTrait @relation("ArmsHidden1", fields: [Arms_H1], references: [id])
  ArmsHidden2  SlimeTrait @relation("ArmsHidden2", fields: [Arms_H2], references: [id])
  ArmsHidden3  SlimeTrait @relation("ArmsHidden3", fields: [Arms_H3], references: [id])

  EyesDominant SlimeTrait @relation("EyesDominant", fields: [Eyes_D], references: [id])
  EyesHidden1  SlimeTrait @relation("EyesHidden1", fields: [Eyes_H1], references: [id])
  EyesHidden2  SlimeTrait @relation("EyesHidden2", fields: [Eyes_H2], references: [id])
  EyesHidden3  SlimeTrait @relation("EyesHidden3", fields: [Eyes_H3], references: [id])

  MouthDominant SlimeTrait @relation("MouthDominant", fields: [Mouth_D], references: [id])
  MouthHidden1  SlimeTrait @relation("MouthHidden1", fields: [Mouth_H1], references: [id])
  MouthHidden2  SlimeTrait @relation("MouthHidden2", fields: [Mouth_H2], references: [id])
  MouthHidden3  SlimeTrait @relation("MouthHidden3", fields: [Mouth_H3], references: [id])
}

model SlimeTrait {
  id         Int       @id @default(autoincrement())
  type       TraitType
  name       String
  rarity     Rarity
  pairId     Int? // Points to another SlimeTrait as a potential pair
  mutationId Int? // Points to another SlimeTrait representing mutation to the next gen

  str   Int @default(0)
  def   Int @default(0)
  dex   Int @default(0)
  magic Int @default(0)
  hp    Int @default(0)

  pair     SlimeTrait? @relation("Pair", fields: [pairId], references: [id])
  mutation SlimeTrait? @relation("Mutation", fields: [mutationId], references: [id])

  // Reverse relations for pair and mutation
  pairedTraits   SlimeTrait[] @relation("Pair")
  mutationTraits SlimeTrait[] @relation("Mutation")

  // Relations to Slime (reverse)
  slimesAsAuraDominant Slime[] @relation("AuraDominant")
  slimesAsAuraHidden1  Slime[] @relation("AuraHidden1")
  slimesAsAuraHidden2  Slime[] @relation("AuraHidden2")
  slimesAsAuraHidden3  Slime[] @relation("AuraHidden3")

  slimesAsBodyDominant Slime[] @relation("BodyDominant")
  slimesAsBodyHidden1  Slime[] @relation("BodyHidden1")
  slimesAsBodyHidden2  Slime[] @relation("BodyHidden2")
  slimesAsBodyHidden3  Slime[] @relation("BodyHidden3")

  slimesAsCoreDominant Slime[] @relation("CoreDominant")
  slimesAsCoreHidden1  Slime[] @relation("CoreHidden1")
  slimesAsCoreHidden2  Slime[] @relation("CoreHidden2")
  slimesAsCoreHidden3  Slime[] @relation("CoreHidden3")

  slimesAsHeadpieceDominant Slime[] @relation("HeadpieceDominant")
  slimesAsHeadpieceHidden1  Slime[] @relation("HeadpieceHidden1")
  slimesAsHeadpieceHidden2  Slime[] @relation("HeadpieceHidden2")
  slimesAsHeadpieceHidden3  Slime[] @relation("HeadpieceHidden3")

  slimesAsTailDominant Slime[] @relation("TailDominant")
  slimesAsTailHidden1  Slime[] @relation("TailHidden1")
  slimesAsTailHidden2  Slime[] @relation("TailHidden2")
  slimesAsTailHidden3  Slime[] @relation("TailHidden3")

  slimesAsArmsDominant Slime[] @relation("ArmsDominant")
  slimesAsArmsHidden1  Slime[] @relation("ArmsHidden1")
  slimesAsArmsHidden2  Slime[] @relation("ArmsHidden2")
  slimesAsArmsHidden3  Slime[] @relation("ArmsHidden3")

  slimesAsEyesDominant Slime[] @relation("EyesDominant")
  slimesAsEyesHidden1  Slime[] @relation("EyesHidden1")
  slimesAsEyesHidden2  Slime[] @relation("EyesHidden2")
  slimesAsEyesHidden3  Slime[] @relation("EyesHidden3")

  slimesAsMouthDominant Slime[] @relation("MouthDominant")
  slimesAsMouthHidden1  Slime[] @relation("MouthHidden1")
  slimesAsMouthHidden2  Slime[] @relation("MouthHidden2")
  slimesAsMouthHidden3  Slime[] @relation("MouthHidden3")
}

enum EquipmentType {
  hat
  armour
  weapon
  shield
  cape
  necklace
  pet
  spellbook
}

// Equipment table
model Equipment {
  id          Int           @id @default(autoincrement())
  name        String        @unique
  description String        @default("")
  imgsrc      String
  str         Int           @default(0)
  def         Int           @default(0)
  dex         Int           @default(0)
  magic       Int           @default(0)
  hp          Int           @default(0)
  rarity      Rarity
  type        EquipmentType // hat, armour, weapon, shield, cape, necklace, pet, spellbook

  equipmentInventory Inventory[]

  CraftingRecipe CraftingRecipe[]
}

// Items table
model Item {
  id           Int         @id @default(autoincrement())
  name         String      @unique
  description  String      @default("")
  imgsrc       String
  rarity       Rarity
  consumableId Int?
  consumable   Consumable? @relation(fields: [consumableId], references: [id])
  sellPriceGP Int?

  farmingDurationS     Int?
  farmingLevelRequired Int?
  farmingExp           Int?

  itemInventory Inventory[]

  CraftingRecipeItems CraftingRecipeItems[]
}

// Inventory table
model Inventory {
  id          Int      @id @default(autoincrement())
  userId      String
  itemId      Int? // References Item table (nullable for equipment entries)
  equipmentId Int? // References Equipment table (nullable for item entries)
  quantity    Int      @default(1)
  order       Int      @default(0) // Order for sorting in the inventory
  createdAt   DateTime @default(now())

  // Relations to User
  user      User       @relation(fields: [userId], references: [telegramId])
  item      Item?      @relation(fields: [itemId], references: [id])
  equipment Equipment? @relation(fields: [equipmentId], references: [id])

  // Relations for equipped items (mirrored from User)
  hatUser       User? @relation("Hat")
  armourUser    User? @relation("Armour")
  weaponUser    User? @relation("Weapon")
  shieldUser    User? @relation("Shield")
  capeUser      User? @relation("Cape")
  necklaceUser  User? @relation("Necklace")
  petUser       User? @relation("Pet")
  spellbookUser User? @relation("Spellbook")

  // Enforce uniqueness: Only one row per user-item or user-equipment combo
  @@unique([userId, itemId, equipmentId])
  @@index([userId, order])
}

// Define an enum for effect types
enum EffectType {
  plus // Represented as "+"
  times // Represented as "*"
}

// Consumable table using enums for effects
model Consumable {
  id Int @id @default(autoincrement())

  str       Int?
  strEffect EffectType? @map("str_effect")

  def       Int?
  defEffect EffectType? @map("def_effect")

  dex       Int?
  dexEffect EffectType? @map("dex_effect")

  magic       Int?
  magicEffect EffectType? @map("magic_effect")

  hp       Int?
  hpEffect EffectType? @map("hp_effect")

  maxHp       Int?        @map("max_hp")
  maxHpEffect EffectType? @map("max_hp_effect")

  durationS Int? // Duration in seconds for consumables

  Item Item[]
}

model CraftingRecipe {
  id          Int       @id @default(autoincrement())
  equipmentId Int       @unique
  equipment   Equipment @relation(fields: [equipmentId], references: [id])
  durationS   Int

  craftingLevelRequired Int
  craftingExp           Int

  // This table defines the items required for crafting
  CraftingRecipeItems CraftingRecipeItems[]
}

model CraftingRecipeItems {
  id       Int            @id @default(autoincrement())
  recipeId Int
  recipe   CraftingRecipe @relation(fields: [recipeId], references: [id])
  itemId   Int
  item     Item           @relation(fields: [itemId], references: [id])
  quantity Int            @default(1) // Number of items required to craft the equipment

  @@unique([recipeId, itemId]) // Ensure unique combination of item and recipe
}
